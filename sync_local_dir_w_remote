#!/bin/bash


# Utility, which syncs a local directory content with a remote one. 
# It uses the file size as indicator, if a sync is necessary, in case a file with the same names is present remotely.
# This sync works unidirectional from local to remote.

DELIMITER="\t"
. .env

if [ -z $OWNCLOUD_URL ];then
    echo "No owncloud url set. Did you configure a proper .env file?"
    exit 1
fi

function _cadaver_call() {
    local func=$1
    cat <<EOF | cadaver $OWNCLOUD_URL
${func}
EOF
}


function list_remote_files() {
    local dir_path=$1
    _cadaver_call "ls $dir_path" \
        | head -n -2 | tail -n +3 `# drop ls header and cadaver footer` \
        | grep -vE "^Coll: " `# drop directories, which are marked with "Coll:"` \
        | sed "s/^ \+//g" \
        | grep -o "^.* \{14,\}[0-9]\+" `# only consider filename and size` \
        | sed "s/ \{14,\}/$DELIMITER/g" \
        | sort
    # simply splitting with spaces does not work, since ls can return files with spaces
}

function list_local_files() {
    local dir_path=$1
    find $dir_path -maxdepth 1 -type f -printf "%f$DELIMITER%s\n" \
        | sort
}


function list_unsynced_local_files() {
    local local_dir_path=$1
    local remote_dir_path=$2
    diff <(list_local_files $local_dir_path) <(list_remote_files $remote_dir_path) \
        | grep -E "^< " \
        | sed "s/^< //g" \
        | cut -f1

}

function send_files_to_remote() {
    _cadaver_call "mput $@"

}

sync_local_w_remote() {
    local local_dir_path=$1
    local remote_dir_path=${2:-$local_dir_path}
    files_to_sync=$(echo -n $(
        list_unsynced_local_files $local_dir_path $remote_dir_path \
            | sed -e "s/\(.*\)/'\1'/g" 
    ))
    (
        cd $local_dir_path
        cmd="cd $remote_dir_path
             mput $files_to_sync"
        _cadaver_call "$cmd"
    )
}



# Tests
# * basic upload
# * no upload if files and sizes match
# * upload when size differs
# * only upload with depth=1
# * upload with spaces in filenames
# * target dir does not exist


